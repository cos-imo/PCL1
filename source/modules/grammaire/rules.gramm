FICHIER -> with Ada.Text_IO; use Ada.Text_IO procedure IDENT is DECLETOILE begin INSTR INSTRETOILE end IDENT DECL2 begin INSTR INSTRETOILE end IDENT ; eof .
DECL -> type IDENT DECL2 .
DECL -> IDENT IDENTETOILE sc TYPE psc egal EXPRINTER . .
DECL -> procedure IDENT PARAMS is DECLETOILE begin INSTR INSTRETOILE end IDENT ; .
DECL -> function IDENT PARAMS return TYPE is DECLETOILE begin INSTR INSTRETOILE end IDENT ; .
DECL2 -> is DECL3 .
DECL2 -> .
DECL3 -> record CHAMPS CHAMPSETOILE end record ; .
DECL3 -> access IDENT ; .
CHAMPS -> IDENT IDENTETOILE : TYPE .
TYPE -> ident .
TYPE -> access IDENT .
PARAMS ->  ( ; PARAM PARAMETOILE ) .
PARAM -> IDENT IDENTETOILE : MODEINTER TYPE .
MODE -> in MODE2 .
MODE2 -> OUT .
MODE2 -> .
EXPR -> ENTIER .
EXPR -> CHARACTERE .
EXPR -> true .
EXPR -> false .
EXPR -> null .
EXPR -> ( EXPR EXPR2 ) .
EXPR -> IDENT EXPR2 .
EXPR -> not EXPR EXPR2 .
EXPR -> + .
EXPR -> new IDENT EXPR2 .
EXPR -> ident p EXPRPLUS p EXPR2 .
EXPR2 -> OPERATEUR EXPR EXPR2 .
INSTR -> IDENT INSTRIDENT .
INSTRIDENT -> ; .
INSTRIDENT -> . EXPR EXPRETOILE . ; .
INSTR -> return EXPR inter sc .
INSTR -> begin INSTR INSTRETOILE .
INSTR -> if EXPR then INSTR INSTRETOILE ( elsif EXPR then INSTR INSTRETOILE ) .
INSTR -> for IDENT in REVERSEINTER EXPR : EXPR loop INSTR INSTRETOILE end loop ; .
INSTR -> while EXPR loop INSTR INSTRETOILE end loop ; .
OPERATEUR -> = .
OPERATEUR -> / SLASHEGAL .
OPERATEUR -> < COMPEGAL .
OPERATEUR -> > COMPEGAL .
OPERATEUR -> + .
OPERATEUR -> - .
OPERATEUR -> * .
OPERATEUR -> rem .
OPERATEUR -> and ANDTHEN .
OPERATEUR -> or ORELSE .
SLASHEGAL -> = .
SLASHEGAL -> .
COMPEGAL -> = .
COMPEGAL -> .
ANDTHEN -> .
ANDTHEN -> then .
ORELSE -> else .
ORELSE -> .
IDENTETOILE -> , IDENT IDENTETOILE .
IDENTETOILE -> .
PARAMETOILE -> ; PARAM PARAMETOILE .
PARAMETOILE -> .
DECLETOILE -> DECL DECLETOILE .
DECLETOILE -> .
INSTRETOILE -> INSTR INSTRETOILE .
IDENTET -> IDENT .
IDENTET -> .
CHAMPSETOILE -> CHAMPS CHAMPSETOILE .
CHAMPSETOILE -> .
EXPRETOILE -> , EXPR EXPRETOILE .
EXPRETOILE -> .
EXPRINTER -> EXPR .
EXPRINTER -> .
ELSIFETOILE -> elsif EXPR then INSTR INSTRETOILE ELSIFETOILE .
ELSIFETOILE -> .
ACCES -> EXPR2 Z IDENT .
Z -> z .
Z -> .
EXPRPLUS -> EXPR EXPRETOILE .
MODEINTER -> MODE .
MODEINTER -> .
REVERSEINTER -> reverse .
REVERSEINTER -> .
